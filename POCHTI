#include <stdio.h> 
#include <string.h> 
#include <stdbool.h>  // For 'true' and 'false' 
#include <ctype.h>    // For case-insensitive checks 
#include <stdlib.h>   

#define MAX 10  

// Define the Book structure 
typedef struct { 
    int ID; 
    char title[50]; 
    char author[50]; 
    bool borrowed;  
} Book; 

// Array of books
Book books[MAX] = { 
    {1, "Abai", "Mukhtar Auezov", false}, 
    {2, "AZ i Ia", "Olzhas Suleimenov", false}, 
    {3, "My name is Qozha", "Berdibek Soqpaqbayev", false}, 
    {4, "Qara sozder", "Abai Qunanbaiuly", false}, 
    {5, "Qan men Ter", "Abdizhamil Nurpeisov", false}, 
    {6, "Qozy Korpesh - Byan Sulu", "Ghabit Musrepov", false}, 
    {7, "Qyz Zhibek", "Saken Seifullin", false}, 
    {8, "Ushqan uyia", "Baurzhan Momyshuly", false}, 
    {9, "Zhabaiy alma", "Sain Muratbekov", false}, 
    {10, "Zhusan iysy", "Sain Muratbekov", false} 
};

// Convert a string to lowercase
void toLowerCase(char *str) {
    for (int i = 0; str[i]; i++) {
        str[i] = tolower(str[i]);
    }
}

// Display available books
void availableBooks() { 
    printf("Available books:\n"); 
    int availableFound = 0;

    for (int i = 0; i < MAX; i++) { 
        if (!books[i].borrowed) { // Check if the book is not borrowed 
            printf("ID: %d | Title: '%s' | Author: %s\n", books[i].ID, books[i].title, books[i].author); 
            availableFound = 1; 
        } 
    } 

    if (!availableFound) { 
        printf("No available books right now.\n"); 
    }
}

// Borrow a book
void borrowBook() { 
    char input[50]; 
    int found = 0; 
    printf("Enter the book's ID or Title you want to borrow: \n"); 
    getchar(); // Clear newline character
    fgets(input, sizeof(input), stdin);
    input[strcspn(input, "\n")] = '\0'; // Remove newline character

    char lowerInput[50];
    strcpy(lowerInput, input);
    toLowerCase(lowerInput); // Convert input to lowercase

    for (int i = 0; i < MAX; i++) { 
        char lowerTitle[50];
        strcpy(lowerTitle, books[i].title);
        toLowerCase(lowerTitle); // Convert title to lowercase

        if (isdigit(lowerInput[0])) { 
            int id = atoi(lowerInput);  
            if (books[i].ID == id && !books[i].borrowed) { 
                printf("You have borrowed the book: '%s' by %s\n", books[i].title, books[i].author); 
                books[i].borrowed = true;   
                found = 1; 
                break; 
            } 
        } else if (strcmp(lowerTitle, lowerInput) == 0 && !books[i].borrowed) { 
            printf("You have borrowed the book: '%s' by %s\n", books[i].title, books[i].author); 
            books[i].borrowed = true;
            found = 1; 
            break; 
        }
    } 

    if (!found) { 
        printf("Sorry, this book is either not available or has already been borrowed.\n"); 
    }
}

// Return a book
void returnBook() { 
    char input[50]; 
    int found = 0;
    printf("Enter the book's ID or Title you want to return: \n"); 
    getchar(); // Clear newline character
    fgets(input, sizeof(input), stdin);
    input[strcspn(input, "\n")] = '\0'; // Remove newline character

    char lowerInput[50];
    strcpy(lowerInput, input);
    toLowerCase(lowerInput); // Convert input to lowercase

    for (int i = 0; i < MAX; i++) { 
        char lowerTitle[50];
        strcpy(lowerTitle, books[i].title);
        toLowerCase(lowerTitle); // Convert title to lowercase

        if (isdigit(lowerInput[0])) { 
            int id = atoi(lowerInput); 
            if (books[i].ID == id && books[i].borrowed) { 
                printf("You have returned the book: '%s' by %s\n", books[i].title, books[i].author); 
                books[i].borrowed = false; // Mark as returned 
                found = 1; 
                break; 
            } 
        } else if (strcmp(lowerTitle, lowerInput) == 0 && books[i].borrowed) { 
            printf("You have returned the book: '%s' by %s\n", books[i].title, books[i].author); 
            books[i].borrowed = false; // Mark as returned 
            found = 1; 
            break; 
        }
    } 

    if (!found) { 
        printf("Sorry, this book is either not available or was not borrowed.\n"); 
    }
}

// Search for a book
void searchBook() { 
    char input[50]; 
    int found = 0; 
    printf("Enter the Book ID or Title to search: \n"); 
    getchar(); // Clear newline character from previous input
    fgets(input, sizeof(input), stdin);
    input[strcspn(input, "\n")] = '\0'; // Remove newline character

    char lowerInput[50];
    strcpy(lowerInput, input);
    toLowerCase(lowerInput); // Convert the input to lowercase

    for (int i = 0; i < MAX; i++) { 
        char lowerTitle[50];
        strcpy(lowerTitle, books[i].title);
        toLowerCase(lowerTitle); // Convert the book title to lowercase

        if (isdigit(lowerInput[0])) { 
            int id = atoi(lowerInput); 
            if (books[i].ID == id) { 
                printf("Book found: '%s' by %s\n", books[i].title, books[i].author); 
                found = 1; 
                break; 
            } 
        } else if (strstr(lowerTitle, lowerInput)) { 
            // Use strstr to check if input is a substring of the title
            printf("Book found: '%s' by %s\n", books[i].title, books[i].author); 
            found = 1; 
        }
    } 

    if (!found) { 
        printf("Sorry, the book was not found.\n"); 
    }
}


// Fine management
void fineManagement() { 
    int day, fine = 3; 
    printf("For how many days did you borrow the book? \n"); 
    scanf("%d", &day); 
    if (day > 3) { 
        fine = fine * (day - 3); 
        printf("Your fine due to overdue is %d.\n", fine); 
    } else { 
        printf("No fine punishment!\n"); 
    }
}

int main() { 
    int action; 

    do { 
        printf("\nSelect an action: \n"); 
        printf("1. Available books\n"); 
        printf("2. Borrow a book\n"); 
        printf("3. Return a book\n"); 
        printf("4. Search a book\n"); 
        printf("5. Fine management\n"); 
        printf("Enter action number: "); 
        scanf("%d", &action); 

        switch(action) { 
            case 1: availableBooks(); break; 
            case 2: borrowBook(); break; 
            case 3: returnBook(); break; 
            case 4: searchBook(); break; 
            case 5: fineManagement(); break; 
            default: printf("Invalid selection, try again.\n"); 
        } 
    } while (action >= 1 && action <= 5); 

    return 0; 
}
